<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
  <title>Space</title>
  <link rel=stylesheet type="text/css" href="/css/css_style.css">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
  <script src="/js/peer.js"></script>

</head>


<body>

<script>

  //var peer = new Peer(['<%= my_id %>'], {host: 'peerjserver.herokuapp.com', port: 443, secure: true, debug: 3});
  //var peer = new Peer(['<%= my_id %>'], {key: '9zqr9jbhn0mmfgvi', debug: 3});
  var peer = new Peer(['<%= my_id %>'], {host: 'meette.me', port: 7000, path: '/api',secure: true, debug: 3});
  var dest_peer_id = '<%= destinated_id %>';


  peer.on('open', function(id) {

    console.log('My peer ID is: ' + id);

  });


  if(<%= host %>)
  {

    var conn = peer.connect(dest_peer_id);

    conn.on('open', function () {

      if(<%= game_mode %> == 0)
      {
        drawSomething(conn);
      }
      //else game_menu


    });

    /*
     conn.on('data', function(data) {
     //console.log('Received', data);
     });
     */



    $(document).ready(function(){
      $("#send_data").off().click(function () {
        conn.send({message: document.getElementById("data").value});
      });
    });


    //check if the destinate peer close the session
    setTimeout(function () {
      setInterval(function () {
        if(conn.open == false)
        {
          peer.destroy();
        }
      },3000);
    },8000);

  }


  peer.on('connection', function(conn) {

    dest_peer_id = conn.peer;

    if(<%= game_mode %> == 0)
    {
      drawSomething(conn);
    }
    //else game_menu



    /*
    conn.on('data', function(data) {
        setUpInfoForConnection(data);
        //console.log('Received', data);
    });
    */
    $(document).ready(function() {
      $("#send_data").off().click(function () {
        conn.send({message: document.getElementById("data").value});
      });
    });

    //check if the destinate peer close the session then clear own user data by peer.destroy
    setTimeout(function () {
      setInterval(function () {
        if(conn.open == false)
        {
          peer.destroy();
        }
      },3000);
    },8000);

  });

  peer.on('close', function() {

    $.ajax({
      type: 'POST',
      url: '/games/clear',
      data: {
        my_peer_id: '<%= my_id %>'
      },
      success: function (msg) {
        //post to index page and redirect and hold to be connect at index page
        console.log("clear back msg " + msg);
        document.getElementById("name").value = msg.name;
        document.getElementById("age").value = msg.age;
        document.getElementById("hobbies").value = msg.hobbies;
        document.getElementById("gender").value = msg.gender;
        document.getElementById("sexual").value = msg.sexual;
        $("#move_back_form").submit();
      },
      error:function(xhr, ajaxOptions, thrownError){
        alert("clear "+xhr.status);
        alert("clear "+thrownError);
      }
    });

  });

  peer.on('error', function(err) {
    alert("error");

  });



  $(document).ready(function () {
    //if the someone cancel the session
    var cancel_peer_id;

    $("#leave_room").off().click(function(){
        //update UI

        //when user click leaver, clear own data from db and move back to index page with their own data
        peer.destroy();
    });
  });



  //be fired when someone close the web page
  window.onbeforeunload = function () {
      /*
    $.ajax({
      type: 'POST',
      url: '/games/clear',
      data: {
        my_peer_id: 'id',
      },
      success: function (msg) {
        //clear data directly
        console.log(msg);
      },
      error:function(xhr, ajaxOptions, thrownError){
        alert("clear "+xhr.status);
        alert("clear "+thrownError);
      }
    });
    */
    peer.destroy();
  }

</script>

<script>


  peer.on('call', function(incoming) {

    //fetching call
    navigator.getUserMedia =  navigator.getUserMedia ||
      navigator.webkitGetUserMedia ||
      navigator.mozGetUserMedia ||
      navigator.msGetUserMedia;


      navigator.getUserMedia({
          audio: true, video: false
      }, function(stream) {
        //replay local audio stream to destinate
        // Answer the call, providing our mediaStream
        incoming.answer(stream);
      }, function(error){
        console.log(error);
        alert('An error occured. Please try again');
      });


    incoming.on('stream', function(stream){

      //get call setting
      var audio = document.getElementById('peer_call');
      var audio_url = window.URL || window.webKitURL || window.mozURL;

      audio.src = audio_url.createObjectURL(stream);
      audio.play();

    });

  });





  $(document).ready(function () {

    $("#call").off().click(function(){



      //fetching call
      navigator.getUserMedia =  (navigator.getUserMedia ||
        navigator.webkitGetUserMedia ||
        navigator.mozGetUserMedia ||
        navigator.msGetUserMedia);


      navigator.getUserMedia({
        audio: true, video: false
      }, function(stream) {
        //replay local audio stream to destinate
        // Answer the call, providing our mediaStream
        var call = peer.call(dest_peer_id, stream);

        call.on('stream', function(stream) {
          // `stream` is the MediaStream of the remote peer.

          //get call setting
          var audio = document.getElementById('peer_call');
          var audio_url = window.URL || window.webKitURL || window.mozURL;

          audio.src = audio_url.createObjectURL(stream);
          audio.play();
        });
      }, function(error){
        console.log(error);
        alert('An error occured. Please try again');
      });


    });

  });



</script>


<script>




function drawSomething(conn){

  var my_draw_topic;
  var peers_draw_topic = " ";

  //hide the answer the input bar
  $('#my_guess').hide();
  $('#draw_answer_submit').hide();

  $.ajax({
    type: 'POST',
    url: '/games/getDrawTopic',
    data: {
    },
    success: function (msg) {
      //give me my topic
      my_draw_topic = msg;
      document.getElementById('my_draw_topic').innerHTML = "我的題目是： " + msg;
    },
    error:function(xhr, ajaxOptions, thrownError){
      alert("clear "+xhr.status);
      alert("clear "+thrownError);
    }
  });


  //after 60secs give destinate the answer to check
  var times_up = setTimeout(function () {
      conn.send({game_answer: my_draw_topic});
      $('#my_guess').show();
      $('#draw_answer_submit').show();
  },60000);

  //if answer has been submit
  $('#draw_answer_submit').off().click(function () {

      if(peers_draw_topic != " ")
      {
        conn.send({my_answer: document.getElementById('my_guess').value});

        if(document.getElementById('my_guess').value == peers_draw_topic)
        {
          document.getElementById('peers_draw_topic').innerHTML = "答對了";
          $('#peers_draw_topic').show();
        }
        else
        {
          document.getElementById('peers_draw_topic').innerHTML = "不是歐，答案是：" + peers_draw_topic;
          $('#peers_draw_topic').show();
        }

        $('#my_guess').hide();
        $('#draw_answer_submit').hide();
      }
  });


  var isDrawing = false;
  var drawingArea = document.getElementById('drawingArea');
  var context = drawingArea.getContext("2d");

  //recorded the mouser data
  var clickX = new Array();
  var clickY = new Array();
  var clickDrag = new Array();

  //color recorded
  var colorPurple = "#cb3594";
  var colorGreen = "#659b41";
  var colorYellow = "#ffcf33";
  var colorBrown = "#986928";
  var curColor = colorPurple;
  var clickColor = new Array();

  $('#Purple_color').off().click(function () {
    curColor = colorPurple;
  });

  $('#Green_color').off().click(function () {
    curColor = colorGreen;
  });

  $('#Yello_color').off().click(function () {
    curColor = colorYellow;
  });

  $('#Brown_color').off().click(function () {
    curColor = colorBrown;
  });

  $('#eraser').off().click(function () {
    curColor = "white";
  });

  $('#clear_draw').off().click(function () {
    clickX.length = 0;
    clickY.length = 0;
    clickDrag.length = 0;
    clickColor.length = 0;
    redraw();
    conn.send({clear_draw: true});
  });

  $('#drawingArea').mousedown(function(e){
    var mouseX = e.pageX - this.offsetLeft;
    var mouseY = e.pageY - this.offsetTop;

    isDrawing = true;
    addClick(e.pageX - this.offsetLeft, e.pageY - this.offsetTop, false);
    redraw();
  }).mousemove(function(e){
    if(isDrawing){
      addClick(e.pageX - this.offsetLeft, e.pageY - this.offsetTop, true);
      redraw();
    }
  }).mouseup(function(e){
    isDrawing = false;
  }).mouseleave(function(e){
    isDrawing = false;
  });



  function addClick(x, y, dragging)
  {
    clickX.push(x);
    clickY.push(y);
    clickDrag.push(dragging);
    clickColor.push(curColor);

    //send to destination
    conn.send({clickX: x, clickY: y, clickDrag: dragging, curColor: curColor});
  }

  function redraw(){
    context.clearRect(0, 0, context.canvas.width, context.canvas.height); // Clears the canvas

    context.lineJoin = "round";
    context.lineWidth = 5;

    for(var i=0; i < clickX.length; i++) {
      context.beginPath();
      if(clickDrag[i] && i){
        context.moveTo(clickX[i-1], clickY[i-1]);
      }else{
        context.moveTo(clickX[i]-1, clickY[i]);
      }
      context.lineTo(clickX[i], clickY[i]);
      context.closePath();
      context.strokeStyle = clickColor[i];
      if(context.strokeStyle == "#ffffff")
        context.lineWidth = 20;
      else
        context.lineWidth = 5;
      context.stroke();
    }
  }



  //peers convas picture
  var peersArea = document.getElementById('destinationArea');
  var peersContext = peersArea.getContext("2d");

  //recorded the mouser data
  var peersClickX = new Array();
  var peersClickY = new Array();
  var peersClickDrag = new Array();

  //peers color recored
  var peersClickColor = new Array();

  function peersRedraw(){
    peersContext.clearRect(0, 0, peersContext.canvas.width, peersContext.canvas.height); // Clears the canvas

    peersContext.lineJoin = "round";
    peersContext.lineWidth = 5;

    for(var i=0; i < peersClickX.length; i++) {

      peersContext.beginPath();
      if(peersClickDrag[i] && i){
        peersContext.moveTo(peersClickX[i-1], peersClickY[i-1]);
      }else{
        peersContext.moveTo(peersClickX[i]-1, peersClickY[i]);
      }
      peersContext.lineTo(peersClickX[i], peersClickY[i]);
      peersContext.closePath();
      peersContext.strokeStyle = peersClickColor[i];
      if(peersContext.strokeStyle == "#ffffff")
        peersContext.lineWidth = 20;
      else
        peersContext.lineWidth = 5;
      peersContext.stroke();
    }
  }


  //dataTransfer
  conn.on('data', function (data) {

    if (data.message) {
      console.log(data.message);
    } else if (data.clickX && data.clickY) {
      peersClickX.push(data.clickX);
      peersClickY.push(data.clickY);
      peersClickDrag.push(data.clickDrag);
      peersClickColor.push(data.curColor);
      peersRedraw();
    } else if(data.clear_draw){
      if(data.clear_draw == true)
      {
        peersClickX.length = 0;
        peersClickY.length = 0;
        peersClickDrag.length = 0;
        peersClickColor.length = 0;
        peersRedraw();
      }
    } else if(data.game_answer) {
      peers_draw_topic = data.game_answer;
    } else if(data.my_answer) {
      document.getElementById('peers_guess').innerHTML = "他覺得是：" + data.my_answer;
    }
  });




}





</script>

<!-- the form is for send data to games page -->
<form id = "move_back_form" action='/' method="POST">
  <input type="hidden" id="name" name="name" type="text" >
  <input type="hidden" id="age" name="age" type="text" >
  <input type="hidden" id="hobbies" name="hobbies" type="text" >
  <input type="hidden" id="gender" name="gender" type="text" >
  <input type="hidden" id="sexual" name="sexual" type="text" >
</form>





<div class="container">

  <header>

    <div class="header">

    </div>

    <div class="footer">
      <p class="footstyle">&copy; 2016 All Right Reserved. </p>
    </div>

  </header>


  <div class="sidebody">

    <input id="data" name="data" type="text">
    <button id="send_data" name="send_data"> Send </button> <br>

    <audio id="peer_call" name="peer_call" controls=" "> </audio>
    <button id="call" name="call"> Call </button> <br>

  <div class="drawSomething">


    <p id="my_draw_topic" name="my_draw_topic"> </p>

    <input id="my_guess" name="my_guess" type="text">
    <button id="draw_answer_submit" name="draw_answer_submit"> Subimt Answer </button>
    <p id="peers_draw_topic" name="peers_draw_topic"> </p>
    <p id="peers_guess" name="peers_guess"> </p>

    <button id="Purple_color" name="Purple_color"> Purple </button>
    <button id="Green_color" name="Green_color"> Green </button>
    <button id="Yello_color" name="Yello_color"> Yello </button>
    <button id="Brown_color" name="Brown_color"> Brown </button>
    <button id="eraser" name="eraser"> Eraser </button>
    <button id="clear_draw" name="clear_draw"> Clear </button>


    <canvas id="drawingArea" name="drawingArea" width="800" height="500" style="border:1px solid">
    </canvas>
    <canvas id="destinationArea" name="destinationArea" width="800" height="500" style="border:1px solid">
    </canvas>


  </div>




    <button id="leave_room" name="leave_room"> Close </button>

    <footer class="panel-footer text-center navbar-fixed-bottom" >
      &copy; 2016 All Right Reserved.
    </footer>
  </div>


</div>


</body>
</html>
